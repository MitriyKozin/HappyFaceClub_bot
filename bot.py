from math import ceil
from datetime import datetime, timedelta
from multiprocessing import context
import pytz
import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, ChatMemberHandler
from telegram.error import TelegramError
from telegram.constants import ParseMode
from yookassa import Configuration, Payment
from dotenv import load_dotenv
from database import get_db_connection, init_db, add_user, check_user_access, update_subscription
import os
import logging
import asyncio
import sqlite3 # Python 3.9.13  Ok


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —è–≤–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π UTF-8
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
CHANNEL_ID = int(os.getenv('CHANNEL_ID'))
CHAT_LINK = os.getenv('CHAT_LINK')
LINK_CLOSED_CHANNEL = os.getenv('LINK_CLOSED_CHANNEL')
SUBSCRIPTION_PRICE = float(os.getenv('SUBSCRIPTION_PRICE', 1000))
TRIAL_DAYS = int(os.getenv('TRIAL_DAYS', 5))
ADMIN_ID = int(os.getenv('ADMIN_ID'))
FRIEND_ID = int(os.getenv('FRIEND_ID', 0))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not all([TOKEN, CHANNEL_ID, CHAT_LINK, LINK_CLOSED_CHANNEL, SUBSCRIPTION_PRICE, TRIAL_DAYS, ADMIN_ID]):
    raise ValueError("Missing required environment variables in .env")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ÆKassa
Configuration.account_id = os.getenv('YOOKASSA_SHOP_ID')
Configuration.secret_key = os.getenv('YOOKASSA_SECRET_KEY')

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –ú–æ—Å–∫–≤—ã
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()

async def generate_invite_link(context: ContextTypes.DEFAULT_TYPE, user_id: int) -> str:
    try:
        link = await context.bot.create_chat_invite_link(
            chat_id=CHANNEL_ID,
            member_limit=1,
            expire_date=int((datetime.now(MOSCOW_TZ) + timedelta(days=1)).timestamp())
        )
        return link.invite_link
    except Exception as e:
        logger.error(f"Error generating invite link for user {user_id}: {e}")
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}",
            parse_mode=ParseMode.HTML
        )
        if FRIEND_ID:
            await context.bot.send_message(
                chat_id=FRIEND_ID,
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}",
                parse_mode=ParseMode.HTML
            )
        return ""

async def create_payment(user_id: int, bot_username: str):
    try:
        payment = Payment.create({
            "amount": {
                "value": f"{SUBSCRIPTION_PRICE:.2f}",
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": f"https://t.me/{bot_username}?start=payment_{user_id}"
            },
            "capture": True,
            "description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ HappyFaceClub",
            "metadata": {"user_id": str(user_id)}
        })
        logger.info(f"Created payment {payment.id} for user {user_id}")

        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('''
        INSERT INTO payments (payment_id, user_id, amount, status)
        VALUES (?, ?, ?, ?)
        ON CONFLICT(payment_id) DO NOTHING
        ''', (payment.id, user_id, SUBSCRIPTION_PRICE, 'pending'))
        conn.commit()
        conn.close()

        return payment.confirmation.confirmation_url, payment.id
    except Exception as e:
        logger.error(f"Payment creation error for user {user_id}: {e}")
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}",
            parse_mode=ParseMode.HTML
        )
        if FRIEND_ID:
            await context.bot.send_message(
                chat_id=FRIEND_ID,
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}",
                parse_mode=ParseMode.HTML
            )
        return None, None

async def check_payment_status(payment_id: str, user_id: int, context: ContextTypes.DEFAULT_TYPE):
    try:
        payment = Payment.find_one(payment_id)
        if not payment:
            logger.error(f"Payment {payment_id} not found for user {user_id}")
            return False

        if payment.metadata.get('user_id') != str(user_id):
            logger.error(f"Payment {payment_id} does not belong to user {user_id}")
            return False

        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('''
        UPDATE payments SET status = ?, date = datetime('now')
        WHERE payment_id = ?
        ''', (payment.status, payment.id))

        if payment.status == 'succeeded':
            update_subscription(user_id, payment_id, SUBSCRIPTION_PRICE)

            cursor.execute('''
            SELECT subscription_end FROM users WHERE user_id = ?
            ''', (user_id,))
            result = cursor.fetchone()
            new_end_date = None
            if result and result[0]:
                new_end_date = datetime.strptime(result[0], '%Y-%m-%d %H:%M:%S').replace(tzinfo=MOSCOW_TZ)
            else:
                new_end_date = datetime.now(MOSCOW_TZ) + timedelta(days=30)
            conn.commit()
            conn.close()

            invite_link = await generate_invite_link(context, user_id)
            if not invite_link:
                logger.error(f"Failed to generate invite link for user {user_id}")
                await context.bot.send_message(
                    chat_id=user_id,
                    text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                    parse_mode=ParseMode.HTML
                )
                return True

            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
                     f"üîì –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ {new_end_date.strftime('%d.%m.%Y')}\n"
                     f"üîó –°—Å—ã–ª–∫–∞ –≤ –≥—Ä—É–ø–ø—É: {invite_link}\n\n"
                     f"–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! ‚ù§Ô∏è",
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîê –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É", url=invite_link)]
                ])
            )

            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"üí≥ <b>–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂</b>\n"
                     f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} (@{(await context.bot.get_chat(user_id)).username or '–±–µ–∑ –∏–º–µ–Ω–∏'})\n"
                     f"üí∞ –°—É–º–º–∞: {SUBSCRIPTION_PRICE} RUB\n"
                     f"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: {payment.id}",
                parse_mode=ParseMode.HTML
            )
            if FRIEND_ID:
                await context.bot.send_message(
                    chat_id=FRIEND_ID,
                    text=f"üí≥ <b>–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂</b>\n"
                         f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} (@{(await context.bot.get_chat(user_id)).username or '–±–µ–∑ –∏–º–µ–Ω–∏'})\n"
                         f"üí∞ –°—É–º–º–∞: {SUBSCRIPTION_PRICE} RUB\n"
                         f"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: {payment.id}",
                    parse_mode=ParseMode.HTML
                )
            logger.info(f"Payment {payment_id} succeeded for user {user_id}")
            return True
        else:
            conn.commit()
            conn.close()
            logger.info(f"Payment {payment_id} status: {payment.status}")
            return False
    except Exception as e:
        logger.error(f"Payment processing error for user {user_id}: {e}")
        if 'conn' in locals():
            conn.close()
        return False

async def handle_payment_return(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.message and update.message.text.startswith('/start payment_'):
            user_id = int(update.message.text.split('_')[1])
            if update.effective_user.id != user_id:
                await update.message.reply_text("‚ö†Ô∏è –≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å", parse_mode=ParseMode.HTML)
                return

            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute('''
            SELECT payment_id FROM payments
            WHERE user_id = ?
            ORDER BY date DESC LIMIT 1
            ''', (user_id,))
            payment = cursor.fetchone()
            conn.close()

            if payment:
                payment_id = payment[0]
                if await check_payment_status(payment_id, user_id, context):
                    return
                else:
                    await update.message.reply_text(
                        "‚åõÔ∏è –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check_payment.",
                        parse_mode=ParseMode.HTML
                    )
            else:
                await update.message.reply_text(
                    "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ —Å /start.",
                    parse_mode=ParseMode.HTML
                )
    except Exception as e:
        logger.error(f"Payment return handler error: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞",
            parse_mode=ParseMode.HTML
        )
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ handle_payment_return –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}: {e}",
            parse_mode=ParseMode.HTML
        )
        if FRIEND_ID:
            await context.bot.send_message(
                chat_id=FRIEND_ID,
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ handle_payment_return –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}: {e}",
                parse_mode=ParseMode.HTML
            )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        logger.info(f"User: {user.id} @{user.username}")

        add_user(user.id, user.username)

        if context.args and context.args[0].startswith('payment_'):
            await handle_payment_return(update, context)
            return

        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('''
        SELECT subscription_end, trial_used, join_date, active FROM users WHERE user_id = ?
        ''', (user.id,))
        result = cursor.fetchone()
        conn.close()

        sub_type = 'none'
        days_left = 0
        end_date = None
        active = False

        now = datetime.now(MOSCOW_TZ)
        if result:
            subscription_end, trial_used, join_date, active = result
            if subscription_end:
                sub_end = datetime.strptime(subscription_end, '%Y-%m-%d %H:%M:%S').replace(tzinfo=MOSCOW_TZ)
                if sub_end > now and active:
                    sub_type = 'paid'
                    days_left = max(0, ceil((sub_end - now).total_seconds() / (24 * 3600)))
                    end_date = subscription_end
            if not trial_used:
                join = datetime.strptime(join_date, '%Y-%m-%d %H:%M:%S').replace(tzinfo=MOSCOW_TZ)
                trial_end = join + timedelta(days=TRIAL_DAYS)
                days_left = max(0, ceil((trial_end - now).total_seconds() / (24 * 3600)))
                if days_left >= 0:
                    sub_type = 'trial'
                    end_date = trial_end.strftime('%Y-%m-%d %H:%M:%S')
                    active = True

        payment_link, payment_id = await create_payment(user.id, context.bot.username)
        if not payment_link:
            await update.message.reply_text(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode=ParseMode.HTML
            )
            return

        welcome_text = (
            f"‚ú® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Happy Face Club</b> ‚ú®\n\n"
            f"üåø –≠—Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å —Å–æ–±–æ–π.\n"
            f"–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ, –Ω–æ –º–æ—â–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è –∏ –∫—Ä–∞—Å–æ—Ç—ã\n\n"
            f"üíÜ‚Äç‚ôÄÔ∏è –ú–∞—Å—Å–∞–∂ –∏ —Ç–µ–ª–µ—Å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏\n"
            f"ü•ó –í–∫—É—Å–Ω—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã\n"
            f"ü´∂ –ü–æ–¥–¥–µ—Ä–∂–∫—É –∫–æ–º—å—é–Ω–∏—Ç–∏\n\n"
        )

        keyboard = [
            [InlineKeyboardButton("üîê –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É", url=LINK_CLOSED_CHANNEL)],
            [InlineKeyboardButton("üí¨ –ß–∞—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞", url=CHAT_LINK)],
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å/–ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=payment_link)],
            [
                InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check"),
                InlineKeyboardButton("üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø—É", callback_data="rejoin")
            ],
            [
                InlineKeyboardButton("üí∏ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞", callback_data="check_payment"),
                InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
            ]
        ]

        if sub_type in ['paid', 'trial']:
            invite_link = await generate_invite_link(context, user.id)
            if not invite_link:
                await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏", parse_mode=ParseMode.HTML)
                return

            text = welcome_text
            if sub_type == 'paid':
                text += (
                    f"‚≠êÔ∏è <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞</b>\n"
                    f"–¢–∏–ø: –ü–ª–∞—Ç–Ω–∞—è\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n"
                    f"–ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è: {datetime.strptime(end_date, '%Y-%m-%d %H:%M:%S').replace(tzinfo=MOSCOW_TZ).strftime('%d.%m.%Y')}\n\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –æ–ø–ª–∞—Ç–∏–≤ –µ—â–µ –æ–¥–∏–Ω –º–µ—Å—è—Ü.\n\n"
                )
            else:
                text += (
                    f"‚ú® <b>–£ —Ç–µ–±—è –µ—Å—Ç—å {days_left} –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞</b> - –ø–æ—á—É–≤—Å—Ç–≤—É–π, –∫–∞–∫ —Ç–µ–±–µ –∑–¥–µ—Å—å.\n\n"
                )

            text += (
                f"üîó –°—Å—ã–ª–∫–∞ –≤ –≥—Ä—É–ø–ø—É: {invite_link}\n"
                f"üí¨ –ß–∞—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞: {CHAT_LINK}\n\n"
                f"üí≥ {'–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' if sub_type == 'paid' else '–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'}: {SUBSCRIPTION_PRICE} —Ä—É–±/–º–µ—Å—è—Ü"
            )

            keyboard[0][0] = InlineKeyboardButton("üîê –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É", url=invite_link)

            await update.message.reply_text(
                text=text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard),
                disable_web_page_preview=True
            )
            return

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('''
        SELECT trial_used, join_date FROM users WHERE user_id = ?
        ''', (user.id,))
        result = cursor.fetchone()
        conn.close()

        if result and not result[0]:
            join = datetime.strptime(result[1], '%Y-%m-%d %H:%M:%S').replace(tzinfo=MOSCOW_TZ)
            trial_end = join + timedelta(days=TRIAL_DAYS)
            days_left = max(0, ceil((trial_end - now).total_seconds() / (24 * 3600)))
            if days_left >= 0:
                conn = get_db_connection()
                cursor = conn.cursor()
                cursor.execute('''
                UPDATE users SET subscription_end = ?, active = 1
                WHERE user_id = ?
                ''', (trial_end.strftime('%Y-%m-%d %H:%M:%S'), user.id))
                conn.commit()
                conn.close()

                invite_link = await generate_invite_link(context, user.id)
                if not invite_link:
                    await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏", parse_mode=ParseMode.HTML)
                    return

                text = welcome_text + (
                    f"‚ú® <b>–£ —Ç–µ–±—è –µ—Å—Ç—å {days_left} –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞</b> - –ø–æ—á—É–≤—Å—Ç–≤—É–π, –∫–∞–∫ —Ç–µ–±–µ –∑–¥–µ—Å—å.\n\n"
                    f"üîó –°—Å—ã–ª–∫–∞ –≤ –≥—Ä—É–ø–ø—É: {invite_link}\n"
                    f"üí¨ –ß–∞—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞: {CHAT_LINK}\n\n"
                    f"üí≥ –ü–æ—Å–ª–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: {SUBSCRIPTION_PRICE} —Ä—É–±/–º–µ—Å—è—Ü"
                )

                keyboard[0][0] = InlineKeyboardButton("üîê –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É", url=invite_link)

                await update.message.reply_text(
                    text=text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    disable_web_page_preview=True
                )
            else:
                text = welcome_text + (
                    f"üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞\n\n"
                    f"üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: {SUBSCRIPTION_PRICE} —Ä—É–±/–º–µ—Å—è—Ü"
                )

                await update.message.reply_text(
                    text=text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    disable_web_page_preview=True
                )
        else:
            text = welcome_text + (
                f"üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞\n\n"
                f"üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: {SUBSCRIPTION_PRICE} —Ä—É–±/–º–µ—Å—è—Ü"
            )

            await update.message.reply_text(
                text=text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard),
                disable_web_page_preview=True
            )

    except Exception as e:
        logger.error(f"Error in start for user {user.id}: {str(e)}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML
        )
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}",
            parse_mode=ParseMode.HTML
        )
        if FRIEND_ID:
            await context.bot.send_message(
                chat_id=FRIEND_ID,
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}",
                parse_mode=ParseMode.HTML
            )

async def check_access(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        if query:
            user = query.from_user
            chat_id = query.message.chat_id
        else:
            user = update.effective_user
            chat_id = user.id

        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('''
        SELECT subscription_end, trial_used, join_date, active FROM users WHERE user_id = ?
        ''', (user.id,))
        result = cursor.fetchone()
        conn.close()

        sub_type = 'none'
        days_left = 0
        end_date = None
        active = False

        now = datetime.now(MOSCOW_TZ)
        if result:
            subscription_end, trial_used, join_date, active = result
            if subscription_end:
                sub_end = datetime.strptime(subscription_end, '%Y-%m-%d %H:%M:%S').replace(tzinfo=MOSCOW_TZ)
                if sub_end > now and active:
                    sub_type = 'paid'
                    days_left = max(0, ceil((sub_end - now).total_seconds() / (24 * 3600)))
                    end_date = subscription_end
            if not trial_used:
                join = datetime.strptime(join_date, '%Y-%m-%d %H:%M:%S').replace(tzinfo=MOSCOW_TZ)
                trial_end = join + timedelta(days=TRIAL_DAYS)
                days_left = max(0, ceil((trial_end - now).total_seconds() / (24 * 3600)))
                if days_left >= 0:
                    sub_type = 'trial'
                    end_date = trial_end.strftime('%Y-%m-%d %H:%M:%S')
                    active = True

        if sub_type in ['paid', 'trial']:
            invite_link = await generate_invite_link(context, user.id)
            if not invite_link:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏",
                    parse_mode=ParseMode.HTML
                )
                return

            await context.bot.send_message(
                chat_id=chat_id,
                text=f"‚úÖ <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞</b>\n\n"
                     f"–¢–∏–ø: {'–ü–ª–∞—Ç–Ω–∞—è' if sub_type == 'paid' else '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥'}\n"
                     f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n"
                     f"–ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è: {datetime.strptime(end_date, '%Y-%m-%d %H:%M:%S').replace(tzinfo=MOSCOW_TZ).strftime('%d.%m.%Y')}\n\n"
                     f"üîó –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –≤ –≥—Ä—É–ø–ø—É: {invite_link}",
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîê –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É", url=invite_link)],
                    [
                        InlineKeyboardButton("üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=(await create_payment(user.id, context.bot.username))[0]),
                        InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
                    ]
                ])
            )
        else:
            payment_link, _ = await create_payment(user.id, context.bot.username)
            if payment_link:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ùå <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞</b>\n\n"
                         f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.\n"
                         f"üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: {SUBSCRIPTION_PRICE} —Ä—É–±/–º–µ—Å—è—Ü",
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=payment_link)],
                        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
                    ])
                )
            else:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode=ParseMode.HTML
                )
    except Exception as e:
        logger.error(f"Error in check_access for user {user.id}: {e}")
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML
        )
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ check_access –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}",
            parse_mode=ParseMode.HTML
        )
        if FRIEND_ID:
            await context.bot.send_message(
                chat_id=FRIEND_ID,
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ check_access –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}",
                parse_mode=ParseMode.HTML
            )

async def rejoin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        if query:
            user = query.from_user
            chat_id = query.message.chat_id
        else:
            user = update.effective_user
            chat_id = user.id

        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('''
        SELECT subscription_end, trial_used, join_date, active
        FROM users
        WHERE user_id = ?
        ''', (user.id,))
        result = cursor.fetchone()
        conn.close()

        sub_type = 'none'
        days_left = 0
        end_date = None
        active = False

        now = datetime.now(MOSCOW_TZ)
        if result:
            subscription_end, trial_used, join_date, active = result
            if subscription_end:
                sub_end = datetime.strptime(subscription_end, '%Y-%m-%d %H:%M:%S').replace(tzinfo=MOSCOW_TZ)
                if sub_end > now and active:
                    sub_type = 'paid'
                    days_left = max(0, ceil((sub_end - now).total_seconds() / (24 * 3600)))
                    end_date = subscription_end
            if not trial_used:
                join = datetime.strptime(join_date, '%Y-%m-%d %H:%M:%S').replace(tzinfo=MOSCOW_TZ)
                trial_end = join + timedelta(days=TRIAL_DAYS)
                days_left = max(0, ceil((trial_end - now).total_seconds() / (24 * 3600)))
                if days_left >= 0:
                    sub_type = 'trial'
                    end_date = trial_end.strftime('%Y-%m-%d %H:%M:%S')
                    active = True

        if sub_type in ['paid', 'trial']:
            try:
                chat_member = await context.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user.id)
                if chat_member.status in ['member', 'administrator', 'creator']:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text="‚úÖ –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ. –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.",
                        parse_mode=ParseMode.HTML
                    )
                    return
            except Exception:
                pass

            invite_link = await generate_invite_link(context, user.id)
            if not invite_link:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏",
                    parse_mode=ParseMode.HTML
                )
                return

            await context.bot.send_message(
                chat_id=chat_id,
                text=f"‚úÖ <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞</b>\n\n"
                     f"–¢–∏–ø: {'–ü–ª–∞—Ç–Ω–∞—è' if sub_type == 'paid' else '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥'}\n"
                     f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n"
                     f"–ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è: {datetime.strptime(end_date, '%Y-%m-%d %H:%M:%S').replace(tzinfo=MOSCOW_TZ).strftime('%d.%m.%Y')}\n\n"
                     f"üîó –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –≤ –≥—Ä—É–ø–ø—É: {invite_link}",
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîê –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É", url=invite_link)],
                    [
                        InlineKeyboardButton("üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=(await create_payment(user.id, context.bot.username))[0]),
                        InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
                    ]
                ])
            )
        else:
            payment_link, _ = await create_payment(user.id, context.bot.username)
            if payment_link:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ùå <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞</b>\n\n"
                         f"–î–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.\n"
                         f"üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: {SUBSCRIPTION_PRICE} —Ä—É–±/–º–µ—Å—è—Ü",
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=payment_link)],
                        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
                    ])
                )
            else:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode=ParseMode.HTML
                )
    except Exception as e:
        logger.error(f"Error in rejoin for user {user.id}: {e}")
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML
        )
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ rejoin –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}",
            parse_mode=ParseMode.HTML
        )
        if FRIEND_ID:
            await context.bot.send_message(
                chat_id=FRIEND_ID,
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ rejoin –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}",
                parse_mode=ParseMode.HTML
            )

async def check_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        if query:
            user = query.from_user
            chat_id = query.message.chat_id
        else:
            user = update.effective_user
            chat_id = user.id

        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('''
        SELECT payment_id, status FROM payments
        WHERE user_id = ?
        ORDER BY date DESC LIMIT 1
        ''', (user.id,))
        payment = cursor.fetchone()

        if payment:
            payment_id, status = payment
            if status == 'pending':
                await check_payment_status(payment_id, user.id, context)
                cursor.execute('''
                SELECT status FROM payments
                WHERE payment_id = ?
                ''', (payment_id,))
                status = cursor.fetchone()[0]

        conn.close()

        if payment:
            payment_id, _ = payment
            if status == 'succeeded':
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚úÖ –í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏ –≤ –≥—Ä—É–ø–ø—É.",
                    parse_mode=ParseMode.HTML
                )
            elif status == 'pending':
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚åõÔ∏è –í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode=ParseMode.HTML
                )
            else:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ùå –í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å: {status}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                    parse_mode=ParseMode.HTML
                )
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text="‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã –∑–∞–Ω–æ–≤–æ —Å /start.",
                parse_mode=ParseMode.HTML
            )
    except Exception as e:
        logger.error(f"Error in check_payment for user {user.id}: {e}")
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML
        )
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ check_payment –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}",
            parse_mode=ParseMode.HTML
        )
        if FRIEND_ID:
            await context.bot.send_message(
                chat_id=FRIEND_ID,
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ check_payment –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}",
                parse_mode=ParseMode.HTML
            )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        if query:
            chat_id = query.message.chat_id
        else:
            chat_id = update.effective_user.id

        text = (
            "üìö <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ HappyFaceClub</b>\n\n"
            "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π –∏ –¥–æ—Å—Ç—É–ø–æ–º –∫ –≥—Ä—É–ø–ø–µ:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ\n"
            "/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏\n"
            "/rejoin - –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –≤ –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –≤—ã –≤—ã—à–ª–∏\n"
            "/check_payment - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏\n"
        )
        if update.effective_user.id in [ADMIN_ID, FRIEND_ID]:
            text += (
                "/admin - –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º\n"
                "   ‚ÑπÔ∏è –í –º–µ–Ω—é –∞–¥–º–∏–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
            )

        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.error(f"Error in help_command: {e}")
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML
        )
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ help_command: {e}",
            parse_mode=ParseMode.HTML
        )
        if FRIEND_ID:
            await context.bot.send_message(
                chat_id=FRIEND_ID,
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ help_command: {e}",
                parse_mode=ParseMode.HTML
            )

async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        if user_id not in [ADMIN_ID, FRIEND_ID]:
            await update.message.reply_text("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", parse_mode=ParseMode.HTML)
            return

        keyboard = [
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="remove_inactive")]
        ]
        await update.message.reply_text(
            "üîß <b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º. –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á –∏–ª–∏ –ª–æ–≥–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logger.error(f"Error in admin_menu for user {user_id}: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML
        )
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ admin_menu –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}",
            parse_mode=ParseMode.HTML
        )
        if FRIEND_ID:
            await context.bot.send_message(
                chat_id=FRIEND_ID,
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ admin_menu –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}",
                parse_mode=ParseMode.HTML
            )

async def remove_inactive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        if user_id not in [ADMIN_ID, FRIEND_ID]:
            await update.message.reply_text("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", parse_mode=ParseMode.HTML)
            return

        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('''
        SELECT user_id, username FROM users WHERE active = 1
        ''')
        active_users = cursor.fetchall()
        conn.close()

        if not active_users:
            await update.message.reply_text(
                "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                parse_mode=ParseMode.HTML
            )
            return

        user_list = "\n".join(
            f"üë§ ID: {user[0]}, Username: @{user[1] or '–±–µ–∑ –∏–º–µ–Ω–∏'}"
            for user in active_users
        )
        await update.message.reply_text(
            f"üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(active_users)}):</b>\n\n"
            f"{user_list}\n\n"
            f"‚ÑπÔ∏è Telegram –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ—Ç–∞–º –≤–∏–¥–µ—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –≤—Ä—É—á–Ω—É—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram –∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ —Å —ç—Ç–∏–º —Å–ø–∏—Å–∫–æ–º.",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.error(f"Error in remove_inactive: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML
        )
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ remove_inactive: {e}",
            parse_mode=ParseMode.HTML
        )
        if FRIEND_ID:
            await context.bot.send_message(
                chat_id=FRIEND_ID,
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ remove_inactive: {e}",
                parse_mode=ParseMode.HTML
            )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()

        if query.data == "check":
            await check_access(update, context)
        elif query.data == "rejoin":
            await rejoin(update, context)
        elif query.data == "check_payment":
            await check_payment(update, context)
        elif query.data == "help":
            await help_command(update, context)
        elif query.data == "remove_inactive":
            user_id = query.from_user.id
            if user_id not in [ADMIN_ID, FRIEND_ID]:
                await query.message.reply_text("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", parse_mode=ParseMode.HTML)
                return

            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute('''
            SELECT user_id, username FROM users WHERE active = 1
            ''')
            active_users = cursor.fetchall()
            conn.close()

            if not active_users:
                await query.message.reply_text(
                    "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                    parse_mode=ParseMode.HTML
                )
                return

            user_list = "\n".join(
                f"üë§ ID: {user[0]}, Username: @{user[1] or '–±–µ–∑ –∏–º–µ–Ω–∏'}"
                for user in active_users
            )
            await query.message.reply_text(
                f"üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(active_users)}):</b>\n\n"
                f"{user_list}\n\n"
                f"‚ÑπÔ∏è Telegram –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ—Ç–∞–º –≤–∏–¥–µ—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã. "
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –≤—Ä—É—á–Ω—É—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram –∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ —Å —ç—Ç–∏–º —Å–ø–∏—Å–∫–æ–º.",
                parse_mode=ParseMode.HTML
            )
        else:
            await query.message.reply_text(
                "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ –º–µ–Ω—é.",
                parse_mode=ParseMode.HTML
            )
    except Exception as e:
        logger.error(f"Error in button_callback: {e}")
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML
        )
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ button_callback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}: {e}",
            parse_mode=ParseMode.HTML
        )
        if FRIEND_ID:
            await context.bot.send_message(
                chat_id=FRIEND_ID,
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ button_callback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}: {e}",
                parse_mode=ParseMode.HTML
            )

async def check_subscriptions(context: ContextTypes.DEFAULT_TYPE):
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT user_id, username, subscription_end, trial_used, join_date, active FROM users WHERE active = 1')
        users = cursor.fetchall()

        now = datetime.now(MOSCOW_TZ)
        for user_id, username, subscription_end, trial_used, join_date, active in users:
            end_date = None
            days_left = None
            if subscription_end:
                end_date = datetime.strptime(subscription_end, '%Y-%m-%d %H:%M:%S').replace(tzinfo=MOSCOW_TZ)
                days_left = max(0, ceil((end_date - now).total_seconds() / (24 * 3600)))
            elif not trial_used:
                join = datetime.strptime(join_date, '%Y-%m-%d %H:%M:%S').replace(tzinfo=MOSCOW_TZ)
                trial_end = join + timedelta(days=TRIAL_DAYS)
                days_left = max(0, ceil((trial_end - now).total_seconds() / (24 * 3600)))
                end_date = trial_end

            if days_left is not None and days_left >= 0:
                if days_left in [1, 3]:
                    payment_link, _ = await create_payment(user_id, context.bot.username)
                    if payment_link:
                        try:
                            await context.bot.send_message(
                                chat_id=user_id,
                                text=f"‚ö†Ô∏è <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ {days_left} –¥–µ–Ω—å(–¥–Ω—è)!</b>\n\n"
                                     f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤ –≥—Ä—É–ø–ø–µ.\n"
                                     f"üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: {SUBSCRIPTION_PRICE} —Ä—É–±/–º–µ—Å—è—Ü",
                                parse_mode=ParseMode.HTML,
                                reply_markup=InlineKeyboardMarkup([
                                    [InlineKeyboardButton("üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=payment_link)]
                                ])
                            )
                        except TelegramError as e:
                            if "chat not found" in str(e).lower():
                                logger.info(f"Skipping subscription reminder for user {user_id}: Chat not found")
                            else:
                                logger.error(f"Error sending subscription reminder to user {user_id}: {e}")
                                await context.bot.send_message(
                                    chat_id=ADMIN_ID,
                                    text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}",
                                    parse_mode=ParseMode.HTML
                                )
                                if FRIEND_ID:
                                    await context.bot.send_message(
                                        chat_id=FRIEND_ID,
                                        text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}",
                                        parse_mode=ParseMode.HTML
                                    )
            if end_date and end_date < now and active:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                cursor.execute('UPDATE users SET active = 0 WHERE user_id = ?', (user_id,))
                conn.commit()
                logger.info(f"User {user_id} (@{username or '–±–µ–∑ –∏–º–µ–Ω–∏'}) marked as inactive in database")

                try:
                    await context.bot.ban_chat_member(
                        chat_id=CHANNEL_ID,
                        user_id=user_id
                    )
                    logger.info(f"User {user_id} (@{username or '–±–µ–∑ –∏–º–µ–Ω–∏'}) removed from group due to expired subscription")
                    await context.bot.send_message(
                        chat_id=ADMIN_ID,
                        text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username or '–±–µ–∑ –∏–º–µ–Ω–∏'}) —É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã –∏–∑-–∑–∞ –∏—Å—Ç—ë–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏",
                        parse_mode=ParseMode.HTML
                    )
                    if FRIEND_ID:
                        await context.bot.send_message(
                            chat_id=FRIEND_ID,
                            text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username or '–±–µ–∑ –∏–º–µ–Ω–∏'}) —É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã –∏–∑-–∑–∞ –∏—Å—Ç—ë–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏",
                            parse_mode=ParseMode.HTML
                        )
                except TelegramError as e:
                    if "participant_id_invalid" in str(e).lower():
                        logger.info(f"User {user_id} (@{username or '–±–µ–∑ –∏–º–µ–Ω–∏'}) not in group, skipping ban")
                    else:
                        logger.error(f"Error banning user {user_id}: {e}")
                        await context.bot.send_message(
                            chat_id=ADMIN_ID,
                            text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username or '–±–µ–∑ –∏–º–µ–Ω–∏'}): {e}",
                            parse_mode=ParseMode.HTML
                        )
                        if FRIEND_ID:
                            await context.bot.send_message(
                                chat_id=FRIEND_ID,
                                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username or '–±–µ–∑ –∏–º–µ–Ω–∏'}): {e}",
                                parse_mode=ParseMode.HTML
                            )

                payment_link, _ = await create_payment(user_id, context.bot.username)
                if payment_link:
                    try:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=f"‚ùå <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞</b>\n\n"
                                 f"–í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –≥—Ä—É–ø–ø—ã HappyFaceClub.\n"
                                 f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.\n"
                                 f"üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: {SUBSCRIPTION_PRICE} —Ä—É–±/–º–µ—Å—è—Ü",
                            parse_mode=ParseMode.HTML,
                            reply_markup=InlineKeyboardMarkup([
                                [InlineKeyboardButton("üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=payment_link)]
                            ])
                        )
                    except TelegramError as e:
                        if "chat not found" in str(e).lower():
                            logger.info(f"Skipping expiration notification for user {user_id} (@{username or '–±–µ–∑ –∏–º–µ–Ω–∏'}): Chat not found")
                        else:
                            logger.error(f"Error notifying user {user_id} about expiration: {e}")
                            await context.bot.send_message(
                                chat_id=ADMIN_ID,
                                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username or '–±–µ–∑ –∏–º–µ–Ω–∏'}) –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}",
                                parse_mode=ParseMode.HTML
                            )
                            if FRIEND_ID:
                                await context.bot.send_message(
                                    chat_id=FRIEND_ID,
                                    text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username or '–±–µ–∑ –∏–º–µ–Ω–∏'}) –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}",
                                    parse_mode=ParseMode.HTML
                                )
        conn.close()
    except Exception as e:
        logger.error(f"Error in check_subscriptions: {e}")
        if 'conn' in locals():
            conn.close()
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ check_subscriptions: {e}",
            parse_mode=ParseMode.HTML
        )
        if FRIEND_ID:
            await context.bot.send_message(
                chat_id=FRIEND_ID,
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ check_subscriptions: {e}",
                parse_mode=ParseMode.HTML
            )

async def handle_chat_member_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        chat_member_update = update.chat_member
        if not chat_member_update:
            return

        user = chat_member_update.from_user
        chat = chat_member_update.chat
        new_status = chat_member_update.new_chat_member.status
        old_status = chat_member_update.old_chat_member.status

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤—Å—Ç—É–ø–∏–ª –≤ –∫–∞–Ω–∞–ª
        if new_status in ['member', 'administrator', 'creator'] and old_status in ['left', 'kicked']:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ –Ω—É–∂–Ω–æ–º –∫–∞–Ω–∞–ª–µ
            if str(chat.id) != str(CHANNEL_ID):
                logger.info(f"User {user.id} joined chat {chat.id}, but it's not the target channel {CHANNEL_ID}")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute('''
            SELECT subscription_end, trial_used, join_date, active FROM users WHERE user_id = ?
            ''', (user.id,))
            result = cursor.fetchone()
            conn.close()

            sub_type = 'none'
            days_left = 0
            end_date = None
            active = False
            now = datetime.now(MOSCOW_TZ)

            if result:
                subscription_end, trial_used, join_date, active = result
                if subscription_end:
                    sub_end = datetime.strptime(subscription_end, '%Y-%m-%d %H:%M:%S').replace(tzinfo=MOSCOW_TZ)
                    if sub_end > now and active:
                        sub_type = 'paid'
                        days_left = max(0, ceil((sub_end - now).total_seconds() / (24 * 3600)))
                        end_date = subscription_end
                if not trial_used:
                    join = datetime.strptime(join_date, '%Y-%m-%d %H:%M:%S').replace(tzinfo=MOSCOW_TZ)
                    trial_end = join + timedelta(days=TRIAL_DAYS)
                    days_left = max(0, ceil((trial_end - now).total_seconds() / (24 * 3600)))
                    if days_left >= 0:
                        sub_type = 'trial'
                        end_date = trial_end.strftime('%Y-%m-%d %H:%M:%S')
                        active = True

            if sub_type not in ['paid', 'trial']:
                logger.info(f"User {user.id} (@{user.username or '–±–µ–∑ –∏–º–µ–Ω–∏'}) attempted to join without active subscription")
                try:
                    await context.bot.ban_chat_member(chat_id=chat.id, user_id=user.id)
                    await context.bot.send_message(
                        chat_id=user.id,
                        text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —Å –ø–æ–º–æ—â—å—é /start.",
                        parse_mode=ParseMode.HTML
                    )
                except TelegramError as e:
                    logger.error(f"Error banning or notifying user {user.id}: {e}")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_text = (
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Happy Face Club! üåø\n\n"
                "–†–∞–¥–∞ –∑–Ω–∞—Ç—å, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Å–≤–æ—ë–º —Ç–µ–ª–µ –∏ –¥—É—à–µ‚ú®\n"
                "–¢—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∞—Å—å —Ç–æ–ª—å–∫–æ —á—Ç–æ, –∏ –ø–æ—ç—Ç–æ–º—É –ø–æ–∫–∞ –Ω–µ –≤–∏–¥–∏—à—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ!\n"
                "–ö–æ–Ω—Ç–µ–Ω—Ç –≤ –∫–ª—É–±–µ –≤–∏–¥–µ–Ω —Ç–æ–ª—å–∫–æ —Å –º–æ–º–µ–Ω—Ç–∞ —Ç–≤–æ–µ–≥–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è, –≤—Å—ë, —á—Ç–æ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ ‚Äî –æ—Å—Ç–∞—ë—Ç—Å—è –∑–∞–∫—Ä—ã—Ç—ã–º.\n\n"
                "–ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –º—ã –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏, –∏ —Ç—ã —Å–∫–æ—Ä–æ –≤—Å—ë —É–≤–∏–¥–∏—à—å –∏ –ø–æ—á—É–≤—Å—Ç–≤—É–µ—à—å!\n\n"
                f"–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {'–ü–ª–∞—Ç–Ω–∞—è' if sub_type == 'paid' else '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥'}\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n"
                f"–ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è: {datetime.strptime(end_date, '%Y-%m-%d %H:%M:%S').replace(tzinfo=MOSCOW_TZ).strftime('%d.%m.%Y')}\n\n"
                f"–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –∏—Ö –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ: {CHAT_LINK}\n\n"
                "–° –ª—é–±–æ–≤—å—é –î–ê–®–ê HAPPY FACE ‚ù§Ô∏è"
            )
            try:
                await context.bot.send_message(
                    chat_id=user.id,
                    text=welcome_text,
                    parse_mode=ParseMode.HTML,
                    disable_web_page_preview=True
                )
                logger.info(f"Sent welcome message to user {user.id} (@{user.username or '–±–µ–∑ –∏–º–µ–Ω–∏'}) upon joining channel {CHANNEL_ID}")
            except TelegramError as e:
                logger.error(f"Error sending welcome message to user {user.id}: {e}")
                await context.bot.send_message(
                    chat_id=ADMIN_ID,
                    text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id} (@{user.username or '–±–µ–∑ –∏–º–µ–Ω–∏'}): {e}",
                    parse_mode=ParseMode.HTML
                )
                if FRIEND_ID:
                    await context.bot.send_message(
                        chat_id=FRIEND_ID,
                        text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id} (@{user.username or '–±–µ–∑ –∏–º–µ–Ω–∏'}): {e}",
                        parse_mode=ParseMode.HTML
                    )

    except Exception as e:
        logger.error(f"Error in handle_chat_member_update for user {user.id}: {e}")
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ handle_chat_member_update –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}",
            parse_mode=ParseMode.HTML
        )
        if FRIEND_ID:
            await context.bot.send_message(
                chat_id=FRIEND_ID,
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ handle_chat_member_update –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}",
                parse_mode=ParseMode.HTML
            )      

# –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è notify_users –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤ –±—É–¥—É—â–µ–º
"""
async def notify_users(context: ContextTypes.DEFAULT_TYPE):
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT user_id FROM users')
        users = cursor.fetchall()
        conn.close()
        sent_count = 0
        for user_id in users:
            try:
                await context.bot.get_chat(chat_id=user_id[0])
                await context.bot.send_message(
                    chat_id=user_id[0],
                    text="üéâ –ë–æ—Ç @HappyFaceChat_bot –∑–∞–ø—É—â–µ–Ω! –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å 5 –¥–Ω–µ–π –ø—Ä–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!",
                    parse_mode=ParseMode.HTML
                )
                logger.info(f"Notification sent to user {user_id[0]}")
                sent_count += 1
                await asyncio.sleep(0.1)
            except TelegramError as e:
                if "chat not found" in str(e).lower():
                    logger.info(f"Skipping notification for user {user_id[0]}: Chat not found")
                else:
                    logger.error(f"Error notifying user {user_id[0]}: {e}")
                    await context.bot.send_message(
                        chat_id=ADMIN_ID,
                        text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id[0]}: {e}",
                        parse_mode=ParseMode.HTML
                    )
                    if FRIEND_ID:
                        await context.bot.send_message(
                            chat_id=FRIEND_ID,
                            text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id[0]}: {e}",
                            parse_mode=ParseMode.HTML
                        )
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!",
            parse_mode=ParseMode.HTML
        )
        if FRIEND_ID:
            await context.bot.send_message(
                chat_id=FRIEND_ID,
                text=f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!",
                parse_mode=ParseMode.HTML
            )
    except Exception as e:
        logger.error(f"Error in notify_users: {e}")
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ notify_users: {e}",
            parse_mode=ParseMode.HTML
        )
        if FRIEND_ID:
            await context.bot.send_message(
                chat_id=FRIEND_ID,
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ notify_users: {e}",
                parse_mode=ParseMode.HTML
            )
"""


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Update {update} caused error: {context.error}")
    if isinstance(context.error, telegram.error.Conflict):
        logger.error("Conflict error: Another instance of the bot is running. Stopping this instance.")
        try:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text="‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç: –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ç–µ–∫—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä.",
                parse_mode=ParseMode.HTML
            )
            if FRIEND_ID:
                await context.bot.send_message(
                    chat_id=FRIEND_ID,
                    text="‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç: –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ç–µ–∫—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä.",
                    parse_mode=ParseMode.HTML
                )
        except TelegramError as e:
            logger.error(f"Failed to send conflict notification: {e}")
        raise SystemExit("Stopping bot due to Conflict error")

def main():
    try:
        application = Application.builder().token(TOKEN).build()
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("check", check_access))
        application.add_handler(CommandHandler("rejoin", rejoin))
        application.add_handler(CommandHandler("check_payment", check_payment))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("admin", admin_menu))
        application.add_handler(CommandHandler("remove_inactive", remove_inactive))
        application.add_handler(CallbackQueryHandler(button_callback))
        application.add_handler(ChatMemberHandler(handle_chat_member_update, ChatMemberHandler.MY_CHAT_MEMBER))
        application.add_error_handler(error_handler)

        application.job_queue.run_repeating(check_subscriptions, interval=86400, first=10)

        logger.info("Bot started and ready to accept payments")
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Webhook
        application.run_webhook(
            listen="0.0.0.0",
            port=8443,
            url_path="/webhook",
            webhook_url="https://HappyFaceBot.pythonanywhere.com/webhook"
        )
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
        try:
            bot = telegram.Bot(token=TOKEN)
            bot.send_message(
                chat_id=ADMIN_ID,
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {str(e)}",
                parse_mode=ParseMode.HTML
            )
            if FRIEND_ID:
                bot.send_message(
                    chat_id=FRIEND_ID,
                    text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {str(e)}",
                    parse_mode=ParseMode.HTML
                )
        except Exception as send_error:
            logger.error(f"Failed to send error message: {send_error}")

if __name__ == "__main__":
    main()